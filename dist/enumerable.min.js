!function(t,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define("enumerable",[],n):"object"==typeof exports?exports.enumerable=n():t.enumerable=n()}("undefined"!=typeof self?self:this,function(){return function(t){var n={};function e(o){if(n[o])return n[o].exports;var i=n[o]={i:o,l:!1,exports:{}};return t[o].call(i.exports,i,i.exports,e),i.l=!0,i.exports}return e.m=t,e.c=n,e.d=function(t,n,o){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:o})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(e.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var i in t)e.d(o,i,function(n){return t[n]}.bind(null,i));return o},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=0)}([function(t,n,e){function o(t){this.collection=t||[]}o.fn=o.prototype,o.fn.toString=function(){for(var t="",n=0;n<this.collection.length;n++)t+=""+this.collection[n];return t},o.Range=function(t,n){for(var e=[],o=0;o<n;o++)e[o]=t+o;return e.asEnumerable()},t.exports=o,e(1)},function(t,n,e){e(2),e(3),e(4),e(5),e(6),e(7),e(8),e(9),e(10),e(11),e(12),e(13),e(14),e(15),e(16),e(17),e(18),e(19),e(20),e(21),e(22),e(23),e(24),e(25),e(26)},function(t,n,e){var o=e(0);Array.prototype.asEnumerable=function(){return new o(this)}},function(t,n){Object.prototype.getType=function(){var t=Object.prototype.toString.call(this);return"[object Date]"===t?"date":"[object String]"===t?"string":"[object Number]"===t?"number":"[object Boolean]"===t?"boolean":"[object Array]"===t?"array":"[object Object]"===t?"object":"function"==typeof this?"function":t},Object.prototype.isEqual=function(t,n){var e,o,i=Object.keys(this),l=Object.keys(t);if(i.length!==l.length)return!1;for(n||(i.sort(),l.sort()),e=0;e<i.length;e++)if(i[e]!==l[e])return!1;for(e=0;e<i.length;e++)if(this[o=i[e]]!==t[o])return!1;return!0}},function(t,n,e){e(0).fn.toArray=function(){return this.collection}},function(t,n,e){e(0).fn.any=function(t){var n=null!=t,e=n&&"function"==typeof t;if(!n&&null!=this&&this.collection.length>0)return!0;for(var o=0;o<this.collection.length;o++){var i=this.collection[o];if(null!=i&&(n&&e&&t(o,i,this.collection)))return!0}return!1}},function(t,n,e){e(0).fn.count=function(t){if(null!=t&&"function"==typeof t){for(var n=[],e=0;e<this.collection.length;e++){var o=this.collection[e];t(e,o,this.collection)&&n.push(o)}return n.length}return this.collection.length}},function(t,n,e){e(0).fn.first=function(){if(this.collection.length>0)return this.collection[0];throw new Error("sequence contains no elements")}},function(t,n,e){e(0).fn.firstOrDefault=function(t){return this.collection.length>0?this.collection[0]:null!=t?"function"==typeof t?t():t:null}},function(t,n,e){var o=e(0);o.fn.dropFirst=function(t){return t<=0?new o(this.collection):this.collection.length>t?new o(this.collection.splice(this.collection.length-t,t)):new o}},function(t,n,e){var o=e(0);o.fn.dropLast=function(t){return t<=0?new o(this.collection):this.collection.length>t?new o(this.collection.splice(0,this.collection.length-t)):new o}},function(t,n,e){e(0).fn.last=function(){if(this.collection.length>0)return this.collection[this.collection.length-1];throw new Error("sequence contains no elements")}},function(t,n,e){e(0).fn.lastOrDefault=function(t){var n=null!=t,e=n&&"function"==typeof t;return this.collection.length>0?this.collection[this.collection.length-1]:n?e?t():t:null}},function(t,n,e){var o=e(0);o.fn.shuffle=function(){for(var t,n,e=this.collection.length;0!==e;)n=Math.floor(Math.random()*e),e-=1,t=this.collection[e],this.collection[e]=this.collection[n],this.collection[n]=t;return new o(this.collection)}},function(t,n,e){var o=e(0);o.fn.except=function(t,n){if(this.collection.length<=0)return new o(this.collection);for(var e=[],i=0;i<this.collection.length;i++){for(var l=this.collection[i],r=!1,c=0;c<t.length;c++){var u=t[c];if(n&&"function"===n.getType()){if(!0===n(l,u)){r=!0;break}}else if("object"===u.getType()&&"object"===l.getType()){if(u.isEqual(l)){r=!0;break}}else if(u===l){r=!0;break}}!1===r&&e.push(l)}return e.asEnumerable()}},function(t,n,e){e(0).fn.maximum=function(){var t=null;for(var n,e=[],o=0;o<this.collection.length;o++)null!==(n=this.collection[o])&&"number"===n.getType()&&n%1==0&&e.push(this.collection[o]);return e.length>0&&(t=Math.max.apply(null,e)),t}},function(t,n,e){e(0).fn.minimum=function(){var t=null;for(var n,e=[],o=0;o<this.collection.length;o++)null!==(n=this.collection[o])&&"number"===n.getType()&&n%1==0&&e.push(this.collection[o]);return e.length>0&&(t=Math.min.apply(null,e)),t}},function(t,n,e){var o=e(0);o.fn.orderBy=function(t,n){if(!this.collection)return null;if("[object Array]"!==Object.prototype.toString.call(this.collection))return null;if(0===this.collection.length)return new o([]);var e=n&&"function"==typeof n,i=null!=t,l=[],r=this.collection,c=i?r[0][t].getType():r[0].getType();if(e){r=[];for(var u=0;u<this.collection.length;u++){var f=n(this.collection[u]);f&&r.push(f)}}return"string"===c?l=r.sort(function(n,e){var o=i?n[t].toUpperCase():n.toUpperCase(),l=i?e[t].toUpperCase():e.toUpperCase();return o<l?-1:o>l?1:0}):"number"===c?l=r.sort(function(n,e){return i?n[t]-e[t]:n-e}):"date"===c?l=r.sort(function(n,e){return i?new Date(n[t])-new Date(e[t]):new Date(n)-new Date(e)}):"boolean"===c?l=r.sort(function(t,n){return t===n?0:t?1:-1}):"array"===c?l=this.collection:"object"===c&&(l=this.collection),l.asEnumerable()}},function(t,n,e){var o=e(0);o.fn.orderByDescending=function(t,n){if(!this.collection)return null;if("[object Array]"!==Object.prototype.toString.call(this.collection))return null;if(0===this.collection.length)return new o([]);var e=n&&"function"==typeof n,i=null!=t,l=[],r=this.collection,c=i?r[0][t].getType():r[0].getType();if(e){r=[];for(var u=0;u<this.collection.length;u++){var f=n(this.collection[u]);f&&r.push(f)}}return"string"===c?l=r.sort(function(n,e){var o=i?n[t].toUpperCase():n.toUpperCase(),l=i?e[t].toUpperCase():e.toUpperCase();return o<l?1:o>l?-1:0}):"number"===c?l=r.sort(function(n,e){return i?e[t]-n[t]:e-n}):"date"===c?l=r.sort(function(n,e){return i?new Date(e[t])-new Date(n[t]):new Date(e)-new Date(n)}):"boolean"===c?l=r.sort(function(t,n){return t===n?0:t?-1:1}):"array"===c?l=this.collection:"object"===c&&(l=this.collection),l.asEnumerable()}},function(t,n,e){e(0).fn.select=function(t){var n=[];function e(t,e){var o={};if(1===e.length){for(var i in t)if(i===e[0]){o=t[i];break}}else for(var l=0;l<e.length;l++){var r=e[l];for(var c in t)c===r&&(o[r]=t[c])}n.push(o)}function o(t,e,o,i){n.push(t(e,o,i))}for(var i=0;i<this.collection.length;i++){var l=this.collection[i];null!=t&&t.length>0?"function"===t.getType()?o(t,i,l,this.collection):e(l,t):n.push(l)}return n.asEnumerable()}},function(t,n,e){e(0).fn.single=function(){if(1===this.collection.length)return this.collection[0];throw this.collection.length<1?new Error("sequence contains no elements"):new Error("collection contains more than one item")}},function(t,n,e){e(0).fn.singleOrDefault=function(t){var n=null!=t,e=n&&"function"==typeof t;if(1===this.collection.length)return this.collection[0];if(this.length>1)throw new Error("collection contains more than one item");return n?e?t():t:null}},function(t,n,e){e(0).fn.skip=function(t){var n=[],e=t>0,o=t<this.collection.length;if(!(e&&o))return this;for(var i=0;i<this.collection.length;i++)i<t||n.push(this.collection[i]);return n.asEnumerable()}},function(t,n,e){e(0).fn.skipWhile=function(t){var n=null!=t,e=n&&"function"==typeof t,o=n&&e,i=this.collection.length>0;if(!n||!e)return this;if(o&&i)for(var l=this.collection.length,r=0;r<this.collection.length;r++){if(!0!==t(r,this.collection[r],this.collection))return this.collection.slice(r,l).asEnumerable()}return[].asEnumerable()}},function(t,n,e){e(0).fn.take=function(t){if(0===this.collection.length)return this;if(this.collection.length>t){for(var n=[],e=0;e<t;e++)n.push(this.collection[e]);return n.asEnumerable()}return this}},function(t,n,e){e(0).fn.takeWhile=function(t){var n=[];if(!(null!=t&&"function"==typeof t))return this;for(var e=0;e<this.collection.length;e++){var o=this.collection[e];if(!0!==t(e,o,this.collection))break;n.push(o)}return n.asEnumerable()}},function(t,n,e){e(0).fn.where=function(t){for(var n=[],e=null!=t,o=e&&"function"==typeof t,i=0;i<this.collection.length;i++){var l=this.collection[i];e&&o&&t(i,l,this.collection)&&n.push(l)}return n.asEnumerable()}}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,